{"name":"Doctrine ActiveRecord","tagline":"Object-oriented CRUD for Doctrine DBAL","body":"As a lightweight alternative to Doctrine ORM, this library provides **Business Model** and **Database Access Object** (DAO) classes that encapsulate **Doctrine DBAL** to provide high-performance, object-oriented CRUD (create, read, update, delete) functionality for relational databases. The code is **mature** and **actively used** in several commercial and Open Source projects.\r\n\r\n*Note: This is not an official Doctrine project and the author is not affiliated with the Doctrine Team.*\r\n\r\nBasic example\r\n-------------\r\n\r\n    $db = $container->get('dbal.connection');\r\n    $user = new User ($db);\r\n    $user->find(123);\r\n    $user->update(array('email' => 'bender@ilovebender.com'));\r\n\r\nExample usage in REST controller context\r\n----------------------------------------\r\n\r\nThis example shows how to work with the EntityModel in a REST controller context. Note how easy it is, to avoid deeply nested structures. User model and form are injected as dependencies.\r\n\r\n    <?php\r\n    \r\n    namespace App\\Rest;\r\n    \r\n    use Symfony\\Component\\HttpFoundation\\Request;\r\n    use App\\Exception\\FormInvalidException;\r\n    use App\\Form\\UserForm;\r\n    use App\\Model\\User;\r\n    \r\n    class UserController\r\n    {\r\n        protected $user;\r\n        protected $form;\r\n\r\n        public function __construct(User $user, UserForm $form)\r\n        {\r\n            $this->user = $user;\r\n            $this->form = $form;\r\n        }\r\n\r\n        public function cgetAction()\r\n        {\r\n            $users = $this->user->findAll();\r\n            $result = array();\r\n    \r\n            foreach($users as $user) {\r\n                $result[] = $user->getValues();\r\n            }\r\n    \r\n            return $result;\r\n        }\r\n    \r\n        public function getAction($id)\r\n        {\r\n            return $this->user->find($id)->getValues();\r\n        }\r\n    \r\n        public function deleteAction($id)\r\n        {\r\n            return $this->user->find($id)->delete();\r\n        }\r\n    \r\n        public function putAction($id, Request $request)\r\n        {\r\n            $this->user->find($id);\r\n            $this->form->setDefinedWritableValues($request->request->all())->validate();\r\n    \r\n            if($this->form->hasErrors()) {\r\n                throw new FormInvalidException($this->form->getFirstError());\r\n            } \r\n            \r\n            $this->user->update($this->form->getValues());\r\n    \r\n            return $this->user->getValues();\r\n        }\r\n    \r\n        public function postAction(Request $request)\r\n        {\r\n            $this->form->setDefinedWritableValues($request->request->all())->validate();\r\n    \r\n            if($this->form->hasErrors()) {\r\n                throw new FormInvalidException($this->form->getFirstError());\r\n            }\r\n            \r\n            $this->user->create($this->form->getValues());\r\n    \r\n            return $this->user->getValues();\r\n        }\r\n    }\r\n    \r\nSee also [InputValidation for PHP â€“ Easy & secure whitelist validation for input data of any origin](https://github.com/lastzero/php-input-validation)\r\n\r\nComposer\r\n--------\r\n\r\nIf you are using composer, simply add \"lastzero/doctrine-active-record\" to your composer.json file and run `composer update`:\r\n\r\n    \"require\": {\r\n        \"lastzero/doctrine-active-record\": \"*\"\r\n    }","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}